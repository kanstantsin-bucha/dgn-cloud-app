//
//  UserDBModel.swift
//  
//
//  Created by Kanstantsin Bucha on 21/11/2022.
//

import Foundation
import Fluent
import Vapor

fileprivate enum UserDBKeys: String {
    case deviceAliasIDs
    case createdAt
    case updatedAt
    case loggedInAt
    case userName
    case password
    
    var key: FieldKey {
        return .string(self.rawValue)
    }
}

// {data: {"devicesIds": ["0MLwpEtAKkTSU54f"]}, "createdAt":1640236388,"_id":"0MLwpEtAKkTSU54f"}]}

public final class UserDBModel: Model, CustomStringConvertible {
    // Name of the table or collection.
    public static let schema = "users"

    // MARK: - Autogenerated On Save
    
    @ID(key: .id)
    public var id: UUID?
    
    // MARK: - Data Fields
    
    @Field (key: UserDBKeys.userName.key)
    public var userName: String
    
    @Field(key: UserDBKeys.password.key)
    public var password: String
    
//    @Children(for: T##KeyPath<_, _.Parent<UserDBModel>>)
//    var devices: [DeviceDBModel]
    
    @Field(key: UserDBKeys.loggedInAt.key)
    public var loggedInAt: Date?
    
    @Timestamp(key: UserDBKeys.createdAt.key, on: .create)
    public var createdAt: Date?
    
    @Timestamp(key: UserDBKeys.updatedAt.key, on: .update)
    public var updatedAt: Date?
    
    @Field(key: UserDBKeys.deviceAliasIDs.key)
    public var deviceAliasIDs: [UUID]?

    public var description: String {
        return """
            <UserDBModel id: \(String(describing: id)), updatedAt: \(String(describing: updatedAt)), \
            data: loggedInAt: \(String(describing: loggedInAt)), devicesIDs: \(String(describing: deviceAliasIDs))>
            """
    }
    
    public init() {}

    public init(_ model: UserAPIModel) throws {
        guard let pass = model.password else {
            throw Abort(.internalServerError)
        }
        id = model.id ?? UUID()
        userName = model.userName
        password = try Bcrypt.hash(pass)
        loggedInAt = nil
        let data = model.data
        deviceAliasIDs = data?.deviceAliasIDs ?? []
    }
}

extension UserDBModel: ModelAuthenticatable {
    public static var usernameKey: KeyPath<UserDBModel, Field<String>> = \.$userName
    public static var passwordHashKey: KeyPath<UserDBModel, Field<String>> = \.$password
    
    public func verify (password: String) throws -> Bool {
        return try Bcrypt.verify(
            password,
            created: self.password
        )
    }
}

struct CreateUsersTableMigration: AsyncMigration {
    func prepare(on database: Database) async throws {
        print("prepare CreateUsersTableMigration started")
        try await database.schema(UserDBModel.schema)
            .id()
            .field(UserDBKeys.userName.key, .string)
            .field(UserDBKeys.password.key, .string)
            .field(UserDBKeys.loggedInAt.key, .datetime)
            .field(UserDBKeys.createdAt.key, .datetime)
            .field(UserDBKeys.updatedAt.key, .datetime)
            .field(UserDBKeys.deviceAliasIDs.key, .array(of: .uuid))
            .create()
        
        print("prepare CreateUsersTableMigration finished")
    }
    
    func revert(on database: Database) async throws {
        print("revert CreateUsersTableMigration")
    }
}
