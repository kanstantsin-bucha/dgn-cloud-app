//
//  DeviceDBModel.swift
//  
//
//  Created by Kanstantsin Bucha on 07/01/2023.
//

import Foundation
import Fluent
import Vapor

fileprivate enum DeviceDBKeys: String {
    case createdAt
    case updatedAt
    case loggedInAt
    case name
    case type
    case deviceID
    
    var key: FieldKey {
        return .string(self.rawValue)
    }
}

// {data: {"devicesIds": ["0MLwpEtAKkTSU54f"]}, "createdAt":1640236388,"_id":"0MLwpEtAKkTSU54f"}]}

public final class DeviceAliasDBModel: Model, CustomStringConvertible {
    // Name of the table or collection.
    public static let schema = "devices"

    // MARK: - Autogenerated On Save
    
    @ID(key: .id)
    public var id: UUID?
    
    // MARK: - Data Fields
    
    @Field (key: DeviceDBKeys.name.key)
    public var name: String
    
    @Field(key: DeviceDBKeys.type.key)
    public var type: String
    
    @Field(key: DeviceDBKeys.deviceID.key)
    public var deviceID: String
    
    @Timestamp(key: DeviceDBKeys.createdAt.key, on: .create)
    public var createdAt: Date?
    
    @Timestamp(key: DeviceDBKeys.updatedAt.key, on: .update)
    public var updatedAt: Date?

    public var description: String {
        return """
            <DeviceDBModel id: \(String(describing: id)), name: \(String(describing: name)), \
            type: \(String(describing: type)), \
            deviceID: \(deviceID), \
            updatedAt: \(String(describing: updatedAt)), \
            createdAt: \(String(describing: createdAt)))>
            """
    }
    
    public init() {}

    public init(_ model: DeviceAliasAPIModel) {
        id = model.id ?? UUID()
        name = model.name
        type = model.type
        deviceID = model.deviceID
    }
}

struct CreateDevicesTableMigration: AsyncMigration {
    func prepare(on database: Database) async throws {
        print("prepare CreateDevicesTableMigration started")
        try await database.schema(DeviceAliasDBModel.schema)
            .id()
            .field(DeviceDBKeys.name.key, .string)
            .field(DeviceDBKeys.type.key, .string)
            .field(DeviceDBKeys.deviceID.key, .string)
            .field(DeviceDBKeys.createdAt.key, .datetime)
            .field(DeviceDBKeys.updatedAt.key, .datetime)
            .create()
        
        print("prepare CreateDevicesTableMigration finished")
    }
    
    func revert(on database: Database) async throws {
        print("revert CreateDevicesTableMigration")
    }
}
